from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
import html

from database import Database
from keyboards import *
from config import FEEDBACK_CATEGORIES, FEEDBACK_TYPES, ADMIN_IDS

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class FeedbackStates(StatesGroup):
    waiting_for_type = State()
    waiting_for_category = State()
    waiting_for_message = State()
    waiting_for_confirmation = State()
    waiting_for_admin_response = State()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

@router.message(Command("start"))
async def cmd_start(message: Message, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    await db.add_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    is_admin = user.id in ADMIN_IDS
    if is_admin:
        await db.set_admin(user.id, True)
        keyboard = get_admin_menu()
    else:
        keyboard = get_main_menu()
    
    welcome_text = f"""
üè≠ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¢–î –§–µ—Ä–µ–∫—Å!</b>

–ü—Ä–∏–≤–µ—Ç, {html.escape(user.first_name or user.username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚Ä¢ –û—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá
"""
    
    await message.answer(welcome_text, reply_markup=keyboard, parse_mode="HTML")

@router.message(F.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å")
async def start_feedback(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:",
        reply_markup=get_feedback_type_keyboard()
    )
    await state.set_state(FeedbackStates.waiting_for_type)

@router.callback_query(F.data.startswith("type_"))
async def process_feedback_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    feedback_type = callback.data.split("_")[1]
    
    await state.update_data(feedback_type=feedback_type)
    
    type_text = "–∂–∞–ª–æ–±—É" if feedback_type == "complaint" else "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
    
    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{FEEDBACK_TYPES[feedback_type]}</b>\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–∞—à–µ–π {type_text}:",
        reply_markup=get_category_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(FeedbackStates.waiting_for_category)

@router.callback_query(F.data.startswith("cat_"))
async def process_category(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_key = callback.data.split("_")[1]
    category_name = FEEDBACK_CATEGORIES[category_key]
    
    await state.update_data(category=category_name)
    
    await callback.message.edit_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category_name}</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–æ:",
        parse_mode="HTML"
    )
    await state.set_state(FeedbackStates.waiting_for_message)

@router.message(FeedbackStates.waiting_for_message)
async def process_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if len(message.text) < 10:
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤).")
        return
    
    await state.update_data(message_text=message.text)
    await state.update_data(is_anonymous=False) # –í—Å–µ–≥–¥–∞ –Ω–µ–∞–Ω–æ–Ω–∏–º–Ω–æ
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    data = await state.get_data()
    user = message.from_user
    
    feedback_type_text = FEEDBACK_TYPES[data["feedback_type"]]
    category = data["category"]
    message_text = data["message_text"]
    
    confirmation_text = f"""
<b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏</b>

<b>–¢–∏–ø:</b> {feedback_type_text}
<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}
<b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</b> {user.first_name or user.username}

<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
{html.escape(message_text)}

–í—Å—ë –≤–µ—Ä–Ω–æ?
"""
    
    await message.answer(
        confirmation_text,
        reply_markup=get_confirmation_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(FeedbackStates.waiting_for_confirmation)

@router.callback_query(F.data == "confirm_send")
async def confirm_send(callback: CallbackQuery, state: FSMContext, db: Database):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏"""
    data = await state.get_data()
    user = callback.from_user
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    feedback_id = await db.add_feedback(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name,
        category=data['category'],
        feedback_type=data['feedback_type'],
        message=data['message_text'],
        is_anonymous=data['is_anonymous']
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    feedback_type_text = FEEDBACK_TYPES[data['feedback_type']]
    tag = f"[{feedback_type_text}]"
    
    sender_info = f"{user.first_name or ''} {user.last_name or ''}".strip()
    if user.username:
        sender_info += f" (@{user.username})"
    
    admin_message = f"""
üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{feedback_id}</b>

{tag} <b>{data['category']}</b>

<b>–û—Ç:</b> {sender_info}
<b>–î–∞—Ç–∞:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}

<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
{html.escape(data['message_text'])}
"""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMIN_IDS:
        try:
            await callback.bot.send_message(
                admin_id,
                admin_message,
                parse_mode="HTML",
                reply_markup=get_feedback_action_keyboard(feedback_id)
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{feedback_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\n"
        "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. "
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç—è—Ç.\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!",
        parse_mode="HTML"
    )
    
    await state.clear()

@router.callback_query(F.data == "confirm_edit")
async def confirm_edit(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await callback.message.edit_text(
        "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:"
    )
    await state.set_state(FeedbackStates.waiting_for_message)

@router.callback_query(F.data == "cancel")
async def cancel_feedback(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    await callback.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()

@router.message(F.text == "üìä –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def my_feedback(message: Message, db: Database):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    feedback_list = await db.get_feedback_list()
    user_feedback = [f for f in feedback_list if f['user_id'] == user_id]
    
    if not user_feedback:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
        return
    
    text = "<b>üìä –í–∞—à–∏ –∑–∞—è–≤–∫–∏:</b>\n\n"
    
    for feedback in user_feedback[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
        status_emoji = {
            'new': 'üÜï',
            'in_progress': '‚è≥',
            'closed': '‚úÖ'
        }
        
        feedback_type = FEEDBACK_TYPES.get(feedback['feedback_type'], feedback['feedback_type'])
        status = status_emoji.get(feedback['status'], '‚ùì')
        
        text += f"{status} <b>#{feedback['id']}</b> - {feedback_type}\n"
        text += f"üìÇ {feedback['category']}\n"
        text += f"üìÖ {feedback['created_at'][:16]}\n"
        
        if feedback['admin_response']:
            text += f"üí¨ <i>–ï—Å—Ç—å –æ—Ç–≤–µ—Ç</i>\n"
        
        text += "\n"
    
    await message.answer(text, parse_mode="HTML")

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_command(message: Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"""
    help_text = """
<b>üÜò –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∂–∞–ª–æ–±—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ üìä –ú–æ–∏ –∑–∞—è–≤–∫–∏ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫
‚Ä¢ ‚ÑπÔ∏è –ü–æ–º–æ—â—å - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:</b>
‚Ä¢ –¶–µ—Ö —Ç–µ—Ä–º–æ–ø–ª–∞—Å—Ç–∞–≤—Ç–æ–º–∞—Ç–æ–≤ (–¢–ü–ê)
‚Ä¢ –¶–µ—Ö –ª–∏—Ç—å—è –∞–ª—é–º–∏–Ω–∏—è
‚Ä¢ –ú–æ–Ω—Ç–∞–∂, —É–ø–∞–∫–æ–≤–∫–∞, —Å–±–æ—Ä–∫–∞ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤
‚Ä¢ –õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏ —Å–∫–ª–∞–¥
‚Ä¢ HR –∏ –∫–∞–¥—Ä—ã
‚Ä¢ –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã

<b>–¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π:</b>
‚Ä¢ üò† –ñ–∞–ª–æ–±–∞ - —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ
‚Ä¢ üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ

<b>–†–µ–∂–∏–º—ã –æ—Ç–ø—Ä–∞–≤–∫–∏:</b>
‚Ä¢ üë§ –ü–æ–¥–ø–∏—Å–∞—Ç—å - –≤–∞—à–µ –∏–º—è –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
‚Ä¢ üï∂ –ê–Ω–æ–Ω–∏–º–Ω–æ - –≤–∞—à–µ –∏–º—è –Ω–µ –±—É–¥–µ—Ç —Ä–∞—Å–∫—Ä—ã—Ç–æ

<b>–°—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–æ–∫:</b>
‚Ä¢ üÜï –ù–æ–≤–∞—è - –∑–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞
‚Ä¢ ‚è≥ –í —Ä–∞–±–æ—Ç–µ - –∑–∞—è–≤–∫–∞ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è
‚Ä¢ ‚úÖ –ó–∞–∫—Ä—ã—Ç–∞ - –∑–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.
"""
    
    await message.answer(help_text, parse_mode="HTML")

