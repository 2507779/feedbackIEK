from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
import html
import math

from database import Database
from keyboards import *
from config import FEEDBACK_CATEGORIES, FEEDBACK_TYPES, FEEDBACK_STATUSES, ADMIN_IDS

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
class AdminStates(StatesGroup):
    waiting_for_response = State()

@router.message(F.text == "üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message, db: Database):
    """–ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    user_id = message.from_user.id
    
    if user_id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await db.get_stats()
    
    stats_text = f"""
<b>üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>

<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫:</b>
‚Ä¢ –í—Å–µ–≥–æ: {stats['total']}
‚Ä¢ –ù–æ–≤—ã–µ: {stats['new']}
‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: {stats['in_progress']}
‚Ä¢ –ó–∞–∫—Ä—ã—Ç—ã–µ: {stats['closed']}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    await message.answer(
        stats_text,
        reply_markup=get_admin_panel_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "admin_panel")
async def admin_panel_callback(callback: CallbackQuery, db: Database):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    user_id = callback.from_user.id
    
    if user_id not in ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await db.get_stats()
    
    stats_text = f"""
<b>üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>

<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫:</b>
‚Ä¢ –í—Å–µ–≥–æ: {stats['total']}
‚Ä¢ –ù–æ–≤—ã–µ: {stats['new']}
‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: {stats['in_progress']}
‚Ä¢ –ó–∞–∫—Ä—ã—Ç—ã–µ: {stats['closed']}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    await callback.message.edit_text(
        stats_text,
        reply_markup=get_admin_panel_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("admin_"))
async def admin_actions(callback: CallbackQuery, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    user_id = callback.from_user.id
    
    if user_id not in ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    action = callback.data.split("_")[1]
    
    if action == "new":
        await show_feedback_list(callback, db, "new", "üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏")
    elif action == "progress":
        await show_feedback_list(callback, db, "in_progress", "‚è≥ –ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ")
    elif action == "closed":
        await show_feedback_list(callback, db, "closed", "‚úÖ –ó–∞–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏")
    elif action == "stats":
        await show_detailed_stats(callback, db)
    elif action == "search":
        await show_category_search(callback, db)

async def show_feedback_list(callback: CallbackQuery, db: Database, status: str, title: str, page: int = 1):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫"""
    per_page = 5
    offset = (page - 1) * per_page
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏
    all_feedback = await db.get_feedback_list(status=status, limit=100)
    total_count = len(all_feedback)
    feedback_list = all_feedback[offset:offset + per_page]
    
    if not feedback_list:
        await callback.message.edit_text(
            f"{title}\n\n–ó–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=get_back_keyboard()
        )
        return
    
    text = f"<b>{title}</b>\n\n"
    
    for feedback in feedback_list:
        feedback_type = FEEDBACK_TYPES.get(feedback['feedback_type'], feedback['feedback_type'])
        
        if feedback['is_anonymous']:
            sender = "–ê–Ω–æ–Ω–∏–º–Ω–æ"
        else:
            sender = f"{feedback['first_name'] or ''} {feedback['last_name'] or ''}".strip()
            if feedback['username']:
                sender += f" (@{feedback['username']})"
        
        text += f"<b>#{feedback['id']}</b> - {feedback_type}\n"
        text += f"üìÇ {feedback['category']}\n"
        text += f"üë§ {sender}\n"
        text += f"üìÖ {feedback['created_at'][:16]}\n"
        text += f"üí¨ {feedback['message'][:100]}{'...' if len(feedback['message']) > 100 else ''}\n"
        text += f"<a href='tg://user?id={callback.from_user.id}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ #{feedback['id']}</a>\n\n"
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    total_pages = math.ceil(total_count / per_page)
    if total_pages > 1:
        keyboard = get_pagination_keyboard(page, total_pages, f"admin_{status}")
    else:
        keyboard = get_back_keyboard()
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("admin_") & F.data.contains("_page_"))
async def admin_pagination(callback: CallbackQuery, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –∞–¥–º–∏–Ω–∫–µ"""
    user_id = callback.from_user.id
    
    if user_id not in ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    parts = callback.data.split("_")
    status = parts[1]
    page = int(parts[3])
    
    title_map = {
        "new": "üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏",
        "progress": "‚è≥ –ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ", 
        "closed": "‚úÖ –ó–∞–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏"
    }
    
    await show_feedback_list(callback, db, status, title_map[status], page)

async def show_detailed_stats(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    stats = await db.get_stats()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    all_feedback = await db.get_feedback_list(limit=1000)
    
    category_stats = {}
    type_stats = {"complaint": 0, "suggestion": 0}
    
    for feedback in all_feedback:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category = feedback['category']
        if category not in category_stats:
            category_stats[category] = {"total": 0, "new": 0, "in_progress": 0, "closed": 0}
        
        category_stats[category]["total"] += 1
        category_stats[category][feedback['status']] += 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        if feedback['feedback_type'] in type_stats:
            type_stats[feedback['feedback_type']] += 1
    
    text = f"""
<b>üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats['total']}
‚Ä¢ –ù–æ–≤—ã–µ: {stats['new']}
‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: {stats['in_progress']}
‚Ä¢ –ó–∞–∫—Ä—ã—Ç—ã–µ: {stats['closed']}

<b>–ü–æ —Ç–∏–ø–∞–º:</b>
‚Ä¢ –ñ–∞–ª–æ–±—ã: {type_stats['complaint']}
‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {type_stats['suggestion']}

<b>–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>
"""
    
    for category, cat_stats in category_stats.items():
        text += f"\n<b>{category}:</b>\n"
        text += f"  ‚Ä¢ –í—Å–µ–≥–æ: {cat_stats['total']}\n"
        text += f"  ‚Ä¢ –ù–æ–≤—ã–µ: {cat_stats['new']}\n"
        text += f"  ‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: {cat_stats['in_progress']}\n"
        text += f"  ‚Ä¢ –ó–∞–∫—Ä—ã—Ç—ã–µ: {cat_stats['closed']}\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_keyboard(),
        parse_mode="HTML"
    )

async def show_category_search(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    text = "<b>üîç –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    
    keyboard_buttons = []
    for key, value in FEEDBACK_CATEGORIES.items():
        keyboard_buttons.append([InlineKeyboardButton(text=value, callback_data=f"search_cat_{key}")])
    
    keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data.startswith("search_cat_"))
async def search_by_category(callback: CallbackQuery, db: Database):
    """–ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    user_id = callback.from_user.id
    
    if user_id not in ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    category_key = callback.data.split("_")[2]
    category_name = FEEDBACK_CATEGORIES[category_key]
    
    await show_feedback_list(callback, db, None, f"üîç –ü–æ–∏—Å–∫: {category_name}", category=category_name)

@router.callback_query(F.data.startswith("reply_"))
async def reply_to_feedback(callback: CallbackQuery, state: FSMContext, db: Database):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞—è–≤–∫—É"""
    user_id = callback.from_user.id
    
    if user_id not in ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    feedback_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
    feedback = await db.get_feedback_by_id(feedback_id)
    if not feedback:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    await state.update_data(feedback_id=feedback_id)
    
    await callback.message.edit_text(
        f"<b>–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞—è–≤–∫—É #{feedback_id}</b>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:",
        parse_mode="HTML"
    )
    
    await state.set_state(AdminStates.waiting_for_response)

@router.message(AdminStates.waiting_for_response)
async def process_admin_response(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞"""
    data = await state.get_data()
    feedback_id = data['feedback_id']
    admin_response = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
    feedback = await db.get_feedback_by_id(feedback_id)
    if not feedback:
        await message.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
    await db.update_feedback_status(
        feedback_id=feedback_id,
        status="closed",
        admin_id=message.from_user.id,
        admin_response=admin_response
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –Ω–µ –∞–Ω–æ–Ω–∏–º–Ω–æ)
    if not feedback['is_anonymous'] and feedback['user_id']:
        try:
            user_message = f"""
‚úÖ <b>–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É #{feedback_id}</b>

<b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>
{html.escape(feedback['message'][:200])}{'...' if len(feedback['message']) > 200 else ''}

<b>–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>
{html.escape(admin_response)}

<b>–î–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}
"""
            
            await message.bot.send_message(
                feedback['user_id'],
                user_message,
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {feedback['user_id']}: {e}")
    
    await message.answer(
        f"‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞—è–≤–∫—É #{feedback_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –∑–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞.",
        reply_markup=get_admin_menu()
    )
    
    await state.clear()

@router.callback_query(F.data.startswith("progress_"))
async def set_in_progress(callback: CallbackQuery, db: Database):
    """–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–∞—è–≤–∫—É –≤ —Å—Ç–∞—Ç—É—Å '–≤ —Ä–∞–±–æ—Ç–µ'"""
    user_id = callback.from_user.id
    
    if user_id not in ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    feedback_id = int(callback.data.split("_")[1])
    
    await db.update_feedback_status(
        feedback_id=feedback_id,
        status="in_progress",
        admin_id=user_id
    )
    
    await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Ä–∞–±–æ—Ç—É.")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    feedback = await db.get_feedback_by_id(feedback_id)
    if feedback:
        await callback.message.edit_reply_markup(
            reply_markup=get_feedback_action_keyboard(feedback_id)
        )

@router.callback_query(F.data.startswith("close_"))
async def close_feedback(callback: CallbackQuery, db: Database):
    """–ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É –±–µ–∑ –æ—Ç–≤–µ—Ç–∞"""
    user_id = callback.from_user.id
    
    if user_id not in ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    feedback_id = int(callback.data.split("_")[1])
    
    await db.update_feedback_status(
        feedback_id=feedback_id,
        status="closed",
        admin_id=user_id
    )
    
    await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    feedback = await db.get_feedback_by_id(feedback_id)
    if feedback:
        await callback.message.edit_reply_markup(
            reply_markup=get_feedback_action_keyboard(feedback_id)
        )

