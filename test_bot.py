#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞
"""

import asyncio
import os
import sys

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ü–ï–†–ï–î –∏–º–ø–æ—Ä—Ç–æ–º
os.environ['TESTING'] = '1'
os.environ.setdefault('BOT_TOKEN', 'test_token')
os.environ.setdefault('ADMIN_IDS', '123456789')

from database import Database
from config import FEEDBACK_CATEGORIES, FEEDBACK_TYPES

async def test_database():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É
    db = Database("test_feedback.db")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        await db.init_db()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.add_user(
            user_id=123456789,
            username="test_user",
            first_name="–¢–µ—Å—Ç",
            last_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        )
        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω")
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
        await db.set_admin(123456789, True)
        is_admin = await db.is_admin(123456789)
        assert is_admin, "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤"
        print("‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
        feedback_id = await db.add_feedback(
            user_id=123456789,
            username="test_user",
            first_name="–¢–µ—Å—Ç",
            last_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            category="–¶–µ—Ö —Ç–µ—Ä–º–æ–ø–ª–∞—Å—Ç–∞–≤—Ç–æ–º–∞—Ç–æ–≤ (–¢–ü–ê)",
            feedback_type="complaint",
            message="–¢–µ—Å—Ç–æ–≤–∞—è –∂–∞–ª–æ–±–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
            is_anonymous=False
        )
        print(f"‚úÖ –ó–∞—è–≤–∫–∞ #{feedback_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
        feedback = await db.get_feedback_by_id(feedback_id)
        assert feedback is not None, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"
        print("‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        await db.update_feedback_status(
            feedback_id=feedback_id,
            status="in_progress",
            admin_id=123456789
        )
        print("‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = await db.get_stats()
        assert stats['total'] > 0, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {stats}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories = await db.get_categories()
        assert len(categories) > 0, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
        print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã: {len(categories)} —à—Ç.")
        
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    
    finally:
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É
        if os.path.exists("test_feedback.db"):
            os.remove("test_feedback.db")
    
    return True

def test_config():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        assert len(FEEDBACK_CATEGORIES) > 0, "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"
        print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {len(FEEDBACK_CATEGORIES)} —à—Ç.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã
        assert len(FEEDBACK_TYPES) > 0, "–¢–∏–ø—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"
        print(f"‚úÖ –¢–∏–ø—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {len(FEEDBACK_TYPES)} —à—Ç.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã)
        if os.getenv('BOT_TOKEN'):
            print("‚úÖ BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            print("‚ö†Ô∏è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)")
        
        if os.getenv('ADMIN_IDS'):
            print("‚úÖ ADMIN_IDS —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        else:
            print("‚ö†Ô∏è ADMIN_IDS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)")
        
        print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
        import main
        print("‚úÖ main.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        import handlers
        print("‚úÖ handlers.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        import admin_handlers
        print("‚úÖ admin_handlers.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        import keyboards
        print("‚úÖ keyboards.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        import database
        print("‚úÖ database.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        import config
        print("‚úÖ config.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        print("üéâ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Fereks Feedback Bot\n")
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã", test_imports),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", test_database)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n{'='*50}")
        print(f"–¢–µ—Å—Ç: {test_name}")
        print('='*50)
        
        if asyncio.iscoroutinefunction(test_func):
            result = await test_func()
        else:
            result = test_func()
        
        if result:
            passed += 1
            print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
        else:
            print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
    
    print(f"\n{'='*50}")
    print(f"–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print('='*50)
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}/{total}")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\n–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!")
        print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞:")
        print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª —Å BOT_TOKEN –∏ ADMIN_IDS")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")
        return True
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö.")
        return False

if __name__ == "__main__":
    try:
        result = asyncio.run(main())
        sys.exit(0 if result else 1)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

